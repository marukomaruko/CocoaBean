require 'claide'
require 'colored'
module CocoaBean
  class Command < CLAide::Command

    class << self
      def beanfile_required!
        @beanfile_required = true
      end

      def beanfile_required?
        @beanfile_required
      end

      def validate_platform?
        @validate_platform
      end

      def validate_platform!
        @validate_platform = true
      end
    end

    require 'cocoa_bean/command/new'
    require 'cocoa_bean/command/preview'
    require 'cocoa_bean/command/about'
    require 'cocoa_bean/command/test'
    require 'cocoa_bean/command/dist'

    self.abstract_command = true

    self.command = 'cocoabean'

    self.version = VERSION

    self.description = <<DESC
CocoaBean is a javaScript application framework. An application can be
generated by 'cocoabean new' command. A cocoa bean application can be
generated into 'html app', 'iOS app' and 'OS X app' with one command. Android
and windows will be supported in the future.

Inside a cocoa bean application, use 'cocoabean test' to unit test your code.
use 'cocoabean preview' to launch web browser or simulator depends on options
you provided and application configuration. Use 'cocoabean open' to open the
application in your favorite text editor or IDE. Use 'cocoabean dist' to
generate the application executable or web page.

You may customize the behavior of CocoaBean through 'Beanfile' and '~/.cocoabeanrc'.

If you find any bugs or if you have feature request, welcome to fire an issue here 'https://github.com/cheunghy/CocoaBean/issues'.

Thanks for downloading and using CocoaBean.
DESC

    attr_accessor :app
    attr_accessor :platform

    def self.options
      [
        ['--more', 'Verbose output']
      ].concat(super)
    end

    def run
      help!
    end

    def validate!
      if self.class.beanfile_required?
        UserInterface.exit 'You should run this command inside a cocoa bean application directory.' unless beanfile_location
      end
      if self.class.validate_platform?
        UserInterface.exit 'Provide a platform is required.' unless @platform
        UserInterface.exit 'Platform is not supported by this app.' unless @app.supported_platforms.include? @platform
      end
    end

    def initialize(argv)
      super
      if self.class.beanfile_required?
        if beanfile_location
          load beanfile_location
          @app = CocoaBean::Application.only_app
          @app.root_directory = beanfile_directory
        end
      end
      unless argv.flag?('more')
        require 'rake'
        Rake::FileUtilsExt.verbose_flag = false
      end
    end

    def beanfile_directory(current_dir = nil)
      File.dirname(beanfile_location(current_dir))
    end

    def beanfile_location(current_dir = nil)
      current_dir ||= Dir.pwd
      potential_beanfile = File.expand_path('Beanfile', current_dir)
      if File.exist?(potential_beanfile)
        return potential_beanfile
      else
        return nil if current_dir == '/'
        beanfile_location(File.dirname(current_dir))
      end
    end

  end
end
